// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGActorRepresentationManager.h"

AFGActorRepresentationManager* AFGActorRepresentationManager::Get( UWorld* world){ return nullptr; }
AFGActorRepresentationManager* AFGActorRepresentationManager::Get( UObject* worldContext){ return nullptr; }
AFGActorRepresentationManager::AFGActorRepresentationManager(){ }
void AFGActorRepresentationManager::GetLifetimeReplicatedProps( TArray< FLifetimeProperty >& OutLifetimeProps) const{ }
void AFGActorRepresentationManager::PreReplication( IRepChangedPropertyTracker& changedPropertyTracker){ }
bool AFGActorRepresentationManager::ReplicateSubobjects(  UActorChannel* channel,  FOutBunch* bunch, FReplicationFlags* repFlags){ return bool(); }
bool AFGActorRepresentationManager::CreateAndAddNewRepresentation( AActor* realActor, bool isLocal ){ return bool(); }
bool AFGActorRepresentationManager::UpdateRepresentation( AActor* realActor, bool isLocal ){ return bool(); }
bool AFGActorRepresentationManager::CreateAndAddNewRepresentationNoActor( FVector location,  UTexture2D* compassTexture, FLinearColor compassColor, float lifeTime, bool shouldShowInCompass, bool shouldShowOnMap, ERepresentationType representationType , bool isLocal ){ return bool(); }
bool AFGActorRepresentationManager::RemoveRepresentationOfActor( AActor* realActor){ return bool(); }
void AFGActorRepresentationManager::GetAllActorRepresentations( UPARAM( ref ) TArray<  UFGActorRepresentation* >& out_AllRepresentations){ }
void AFGActorRepresentationManager::DumpActorRepresentations(){ }
void AFGActorRepresentationManager::Tick( float dt){ }
void AFGActorRepresentationManager::OnRep_ReplicatedRepresentations(){ }
