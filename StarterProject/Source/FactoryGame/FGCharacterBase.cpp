// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGCharacterBase.h"

void FFootstepEffect::Reset(){ }
AFGCharacterBase::AFGCharacterBase( const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer) { }
void AFGCharacterBase::GetLifetimeReplicatedProps( TArray< FLifetimeProperty >& OutLifetimeProps) const{ }
void AFGCharacterBase::BeginPlay(){ }
void AFGCharacterBase::EndPlay( const EEndPlayReason::Type EndPlayReason){ }
void AFGCharacterBase::Tick( float deltaTime){ }
float AFGCharacterBase::TakeDamage( float DamageAmount,  FDamageEvent const& DamageEvent,  AController* EventInstigator, AActor* DamageCauser){ return float(); }
void AFGCharacterBase::ApplyDamageMomentum( float DamageTaken, FDamageEvent const& DamageEvent, APawn* PawnInstigator, AActor* DamageCauser){ }
void AFGCharacterBase::PossessedBy( AController* NewController){ }
void AFGCharacterBase::PreSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGCharacterBase::PostSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGCharacterBase::PreLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGCharacterBase::PostLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGCharacterBase::GatherDependencies_Implementation( TArray< UObject* >& out_dependentObjects){ }
bool AFGCharacterBase::NeedTransform_Implementation(){ return bool(); }
bool AFGCharacterBase::ShouldSave_Implementation() const{ return bool(); }
void AFGCharacterBase::Died( AActor* thisActor){ }
void AFGCharacterBase::OnTakeDamage( AActor* damagedActor, float damageAmount, const  UDamageType* damageType,  AController* instigatedBy, AActor* damageCauser){ }
void AFGCharacterBase::OnTakePointDamage( AActor* damagedActor, float damage,  AController* instigatedBy, FVector hitLocation,  UPrimitiveComponent* hitComponent, FName boneName, FVector shotFromDirection, const  UDamageType* damageType, AActor* damageCauser){ }
void AFGCharacterBase::OnTakeRadialDamage( AActor* damagedActor, float damage, const  UDamageType* damageType, FVector hitLocation, FHitResult hitInfo,  AController* instigatedBy, AActor* damageCauser){ }
void AFGCharacterBase::Landed( const FHitResult& Hit){ }
int32 AFGCharacterBase::CalculateFallDamage_Implementation( float zSpeed) const{ return int32(); }
void AFGCharacterBase::SetFallDamageOverride( UCurveFloat* fallDamageCurveOverride){ }
void AFGCharacterBase::PlayLandEffects(){ }
bool AFGCharacterBase::IsAliveAndWell() const{ return bool(); }
void AFGCharacterBase::PushedByVehicle(  AFGVehicle* vehicle, FVector pushVelocity){ }
void AFGCharacterBase::PlayFootstepEffect_Implementation( int32 footDown, bool playSound){ }
bool AFGCharacterBase::TraceForGround( FVector traceStart, FVector traceEnd, FHitResult& out_hitResult, float& out_waterDepth) const{ return bool(); }
const FFootstepEffect& AFGCharacterBase::GetFootstepEffect( const FHitResult& hitResult) const{ return *(new FFootstepEffect); }
void AFGCharacterBase::RagdollCharacter( bool newRagdoll){ }
USkeletalMeshComponent* AFGCharacterBase::GetMesh3P() const{ return nullptr; }
void AFGCharacterBase::CheckFallDamage( float zSpeed){ }
UAkAudioEvent* AFGCharacterBase::GetFootstepEvent( int32 footDown) const{ return nullptr; }
float AFGCharacterBase::AdjustDamage( AActor* damagedActor, float damageAmount, const  UDamageType* damageType,  AController* instigatedBy, AActor* damageCauser){ return float(); }
void AFGCharacterBase::PlayFootstepAudio( int32 footIndex, const FHitResult& hitInfo, float waterDepth){ }
void AFGCharacterBase::PlayFootstepParticle( const FHitResult& hitInfo, const FFootstepEffect& precalculatedEffect, FRotator socketRotation){ }
void AFGCharacterBase::PlaceFootstepDecal( const FHitResult& hitInfo, const FFootstepEffect& precalculatedEffect, FRotator socketRotation){ }
bool AFGCharacterBase::GetWaterFootstepEffect( const TArray< FFootstepEffectWater >& waterEffects, float waterDepth, FFootstepEffect& out_footstepEffect) const{ return bool(); }
void AFGCharacterBase::CheckIfShouldDestroy(){ }
void AFGCharacterBase::DoRagdoll_Internal(){ }
void AFGCharacterBase::TryGetUpFromRagdoll(){ }
void AFGCharacterBase::SyncRagdoll(){ }
void AFGCharacterBase::SetupDestroyTimer(){ }
void AFGCharacterBase::OnRep_IsRagdolled(){ }
FVector AFGCharacterBase::FindSafePlaceToGetUp(){ return FVector(); }
