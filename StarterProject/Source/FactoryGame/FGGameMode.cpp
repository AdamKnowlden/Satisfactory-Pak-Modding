// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGGameMode.h"

AFGGameMode::AFGGameMode(){ }
void AFGGameMode::Serialize( FArchive& ar){ Super::Serialize(ar ); }
void AFGGameMode::PreSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGameMode::PostSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGameMode::PreLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGameMode::PostLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGameMode::GatherDependencies_Implementation( TArray< UObject* >& out_dependentObjects){ }
bool AFGGameMode::NeedTransform_Implementation(){ return bool(); }
bool AFGGameMode::ShouldSave_Implementation() const{ return bool(); }
void AFGGameMode::FinishRestartPlayer( AController* NewPlayer, const FRotator& StartRotation){ }
void AFGGameMode::InitGame( const FString& mapName, const FString& options, FString& out_errorMessage){ }
APawn* AFGGameMode::SpawnDefaultPawnAtTransform_Implementation( AController* newPlayer, const FTransform& spawnTransform){ return nullptr; }
void AFGGameMode::InitGameState(){ }
bool AFGGameMode::AllowCheats( APlayerController* p){ return bool(); }
AActor* AFGGameMode::ChoosePlayerStart_Implementation( AController* player){ return nullptr; }
void AFGGameMode::RestartPlayer( AController* newPlayer){ }
void AFGGameMode::PostLogin( APlayerController* newPlayer){ }
void AFGGameMode::Logout( AController* exiting){ }
void AFGGameMode::PostActorsInitialized( const UWorld::FActorsInitializedParams& inParams){ }
uint8 AFGGameMode::GenerateNextAutosaveId(){ return uint8(); }
void AFGGameMode::KickPlayer( APlayerState* ps){ }
void AFGGameMode::SetSaveSessionName( SessionNameType name){ }
bool AFGGameMode::ShouldSetupSave() const{ return bool(); }
bool AFGGameMode::GetDefaultPlayerCapsuleSize( UWorld* world, float& out_capsuleRadius, float& out_capsuleHalfHeight){ return bool(); }
bool AFGGameMode::RegisterRemoteCallObjectClass( TSubclassOf< UFGRemoteCallObject > inClass){ return bool(); }
void AFGGameMode::RegisterCallObjectOnAllCurrentPlayers( TSubclassOf<UFGRemoteCallObject> inClass){ }
void AFGGameMode::TriggerWorldSave( FString saveGameName){ }
void AFGGameMode::TriggerBundledWorldSave( FString saveGameName){ }
bool AFGGameMode::IsValidPawnToReclaim( APawn* pawn) const{ return bool(); }
APlayerStart* AFGGameMode::CachePlayerStarts( TMap< FName, TArray<  APlayerStart* > >& out_playerStarts){ return nullptr; }
void AFGGameMode::PartitionPlayerStartsByOccupancy(
		const TArray<  APlayerStart* >& playerStarts,
		TSubclassOf<  APawn > pawnClassToFit,
		TArray<  APlayerStart* >& out_unOccupied,
		TArray<  APlayerStart* >& out_occupied){ }
