// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGGamePhaseManager.h"

AFGGamePhaseManager* AFGGamePhaseManager::Get( UWorld* world){ return nullptr; }
AFGGamePhaseManager* AFGGamePhaseManager::Get( UObject* worldContext){ return nullptr; }
AFGGamePhaseManager::AFGGamePhaseManager(){ }
void AFGGamePhaseManager::GetLifetimeReplicatedProps( TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGGamePhaseManager::PreSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGamePhaseManager::PostSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGamePhaseManager::PreLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGamePhaseManager::PostLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGamePhaseManager::GatherDependencies_Implementation( TArray< UObject* >& out_dependentObjects){ }
bool AFGGamePhaseManager::NeedTransform_Implementation(){ return bool(); }
bool AFGGamePhaseManager::ShouldSave_Implementation() const{ return bool(); }
void AFGGamePhaseManager::SetGamePhase( EGamePhase newPhase){ }
FText AFGGamePhaseManager::GetGamePhaseName( EGamePhase gamePhase) const{ return FText(); }
EGamePhase AFGGamePhaseManager::GetGamePhaseForSchematic( TSubclassOf< UFGSchematic > inSchematic){ return EGamePhase(); }
EGamePhase AFGGamePhaseManager::GetGamePhaseForTechTier( int32 techTier){ return EGamePhase(); }
void AFGGamePhaseManager::GetBaseCostForGamePhase( EGamePhase gamePhase, UPARAM( ref )TArray< FItemAmount >& out_cost){ }
void AFGGamePhaseManager::GetCostForGamePhase( EGamePhase gamePhase, UPARAM( ref )TArray< FItemAmount >& out_cost){ }
int32 AFGGamePhaseManager::PayOffOnGamePhase( FItemAmount payOff, EGamePhase gamePhase){ return int32(); }
void AFGGamePhaseManager::OnRep_GamePhase(){ }
