// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGGameState.h"

AFGGameState::AFGGameState(){ }
void AFGGameState::Serialize( FArchive& ar){ Super::Serialize(ar ); }
void AFGGameState::GetLifetimeReplicatedProps( TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGGameState::PreSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PostSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PreLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PostLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGGameState::GatherDependencies_Implementation( TArray< UObject* >& out_dependentObjects){ }
bool AFGGameState::NeedTransform_Implementation(){ return bool(); }
bool AFGGameState::ShouldSave_Implementation() const{ return bool(); }
void AFGGameState::HandleMatchIsWaitingToStart(){ }
void AFGGameState::HandleMatchHasStarted(){ }
void AFGGameState::AddPlayerState(  APlayerState* playerState){ }
void AFGGameState::Init(){ }
int32 AFGGameState::FindFreeSlot(  AFGPlayerState* playerState){ return int32(); }
bool AFGGameState::IsTradingPostBuilt() const{ return bool(); }
bool AFGGameState::HasInitalTradingPostLandAnimPlayed() const{ return bool(); }
void AFGGameState::SetHasInitalTradingPostLandAnimPlayed(){ }
bool AFGGameState::IsSpaceElevatorBuilt() const{ return bool(); }
void AFGGameState::AddScannableResource( TSubclassOf< UFGResourceDescriptor > newResource){ }
void AFGGameState::GetVisitedMapAreas( UPARAM( ref ) TArray< TSubclassOf< UFGMapArea > >& out_VisitedAreas){ }
bool AFGGameState::IsMapAreaVisisted( TSubclassOf< UFGMapArea > inArea){ return bool(); }
void AFGGameState::AddUniqueVisistedMapArea( TSubclassOf< UFGMapArea > mapArea){ }
void AFGGameState::OnRep_MapAreaVisited(){ }
void AFGGameState::NotifyPlayerAdded(  AFGCharacterPlayer* inPlayer){ }
void AFGGameState::SendMessageToAllPlayers( TSubclassOf<  UFGMessageBase > inMessage){ }
void AFGGameState::SendMessageToPlayer( TSubclassOf<  UFGMessageBase > inMessage,  APlayerController* controller){ }
int32 AFGGameState::GetTotalPlayerInventorySlots() const{ return int32(); }
void AFGGameState::SetNumAdditionalArmEquipmentSlots( int32 newNum){ }
int32 AFGGameState::GetTotalPlayerArmEquipmentSlots() const{ return int32(); }
int32 AFGGameState::GetTotalPlayDuration() const{ return int32(); }
void AFGGameState::AddResourceScannedFor( TSubclassOf< UFGResourceDescriptor > resourceScannedFor){ }
void AFGGameState::SetupColorSlots( const FColor *mColorSlotsPrimary, const FColor *mColorSlotsSecondary, const  uint8 startINdex, const uint8 writeCount){ }
void AFGGameState::SetAndReplicateBuildingColorInSlot_Implementation( uint8 slot, FColor pColor, FColor sColor){ }
bool AFGGameState::SetAndReplicateBuildingColorInSlot_Validate( uint8 slot, FColor pColor, FColor sColor){ return bool(); }
FColor AFGGameState::GetBuildingColorPrimary( uint8 slot){ return FColor(); }
FColor AFGGameState::GetBuildingColorSecondary( uint8 slot){ return FColor(); }
void AFGGameState::OnRep_BuildingColorSlot(){ }
void AFGGameState::SetNumberOfAdditionalInventorySlots( int32 numberOfSlots){ }
void AFGGameState::OnSchematicPurchased( TSubclassOf<  UFGSchematic > newSchematic){ }
