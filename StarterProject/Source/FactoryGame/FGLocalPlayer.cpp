// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGLocalPlayer.h"

UFGEM_LoggedOutFromOnlineService::UFGEM_LoggedOutFromOnlineService(){ }
UFGEM_LostConnectionWithOnlineService::UFGEM_LostConnectionWithOnlineService(){ }
UFGEM_FailedToLoginToOnlineService::UFGEM_FailedToLoginToOnlineService(){ }
FFGOnlineFriend::FFGOnlineFriend(){ }
FFGOnlineFriend::FFGOnlineFriend( TSharedRef<FOnlineFriend> onlineFriend){ }
void FSessionInformation::Init( const FString& InMapName, const FString& InOptions, const FString& InSessionName, ESessionVisibility InVisibility){ }
void FSessionInformation::SendAnalytics( UWorld* world){ }
void FSessionInformation::MarkAsOffline(){ }
UFGLocalPlayer::UFGLocalPlayer(){ }
void UFGLocalPlayer::PlayerAdded(  UGameViewportClient* inViewportClient, int32 inControllerID){ }
void UFGLocalPlayer::PlayerRemoved(){ }
FString UFGLocalPlayer::GetUsername() const{ return FString(); }
bool UFGLocalPlayer::GetFriendList( TArray<FFGOnlineFriend>& out_friends){ return bool(); }
void UFGLocalPlayer::AutoLogin(){ }
void UFGLocalPlayer::SetupServerAndTravelToMap( const FString& mapName, const FString& options, const FString& sessionName, ESessionVisibility visibility){ }
void UFGLocalPlayer::CopySessionPresence( const TSharedRef<FOnlineUserPresence>& presence){ }
void UFGLocalPlayer::UpdatePresence(){ }
void UFGLocalPlayer::OnInviteReceived( const FPendingInvite& invite){ }
void UFGLocalPlayer::OnLoginStatusChanged( int32 localUserNum, ELoginStatus::Type previous, ELoginStatus::Type current, const FUniqueNetId& userId){ }
void UFGLocalPlayer::OnLoginComplete( int32 localUserNum, bool wasSuccessful, const FUniqueNetId& userId, const FString& error){ }
void UFGLocalPlayer::OnAutoLoginComplete( int32 localUserNum, bool wasSuccessful, const FUniqueNetId& userId, const FString& error){ }
void UFGLocalPlayer::OnConnectionStatusChanged( const FString& serviceName, EOnlineServerConnectionStatus::Type lastConnectionState, EOnlineServerConnectionStatus::Type connectionState){ }
void UFGLocalPlayer::OnReadFriendsListComplete( int32 localUserNum, bool wasSuccessful, const FString& listName, const FString& errorStr){ }
void UFGLocalPlayer::OnFriendsChange(){ }
void UFGLocalPlayer::OnQueryUserInfoForFriendListComplete( int32 localUSerNum, bool wasSuccessful, const TArray< TSharedRef<const FUniqueNetId> >& userIds, const FString& errorString){ }
void UFGLocalPlayer::OnPresenceReceived( const  FUniqueNetId& userId, const TSharedRef<FOnlineUserPresence>& presence){ }
void UFGLocalPlayer::OnSessionCleanup_SetupServer( FName sessionName, bool wasSuccessful){ }
void UFGLocalPlayer::OnSessionCreated_SetupServer( FName sessionName, bool wasSuccessful){ }
void UFGLocalPlayer::OnPresenceUpdated_SetupServer( const  FUniqueNetId& userId, const TSharedRef<FOnlineUserPresence>& presence){ }
void UFGLocalPlayer::UpdateLoginState(){ }
void UFGLocalPlayer::CreateOfflineSession_SetupServer( bool startOffline){ }
bool UFGLocalPlayer::CanAutoLogin() const{ return bool(); }
FString UFGLocalPlayer::GetPresenceString() const{ return FString(); }
ELoginState UFGLocalPlayer::FromLoginStatus( ELoginStatus::Type from) const{ return ELoginState(); }
void UFGLocalPlayer::OpenMap_SetupServer(){ }
TSharedPtr<const FUniqueNetId> UFGLocalPlayer::GetPlayerId() const{ return TSharedPtr<const FUniqueNetId>(); }
void UFGLocalPlayer::SetLoginState( ELoginState newLoginState){ }
void UFGLocalPlayer::GetUsersWithNoData( TArray<TSharedRef<const FUniqueNetId>>& out_usersWithNoData){ }
bool UFGLocalPlayer::PresenceHasSessionId() const{ return bool(); }
void UFGLocalPlayer::PushErrorAndAutosave( TSubclassOf<class UFGErrorMessage> errorMessage){ }
