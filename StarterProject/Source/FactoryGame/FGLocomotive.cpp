// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGLocomotive.h"

void AFGLocomotive::GetLifetimeReplicatedProps( TArray< FLifetimeProperty >& OutLifetimeProps) const{ }
void AFGLocomotive::PreReplication( IRepChangedPropertyTracker & ChangedPropertyTracker){ }
AFGLocomotive::AFGLocomotive(){ }
void AFGLocomotive::BeginPlay(){ }
void AFGLocomotive::PossessedBy( AController* newController){ }
void AFGLocomotive::UnPossessed(){ }
bool AFGLocomotive::DriverEnter(  AFGCharacterPlayer* driver){ return bool(); }
bool AFGLocomotive::DriverLeave( bool keepDriving ){ return bool(); }
bool AFGLocomotive::CanSelfDriverEnter(  AAIController* ai) const{ return bool(); }
bool AFGLocomotive::SelfDriverEnter(  AAIController* ai){ return bool(); }
EMultipleUnitControl AFGLocomotive::GetMultipleUnitRole() const{ return EMultipleUnitControl(); }
bool AFGLocomotive::CanSetTrainMultipleUnitMaster() const{ return bool(); }
bool AFGLocomotive::SetMultipleUnitControlMaster( bool force){ return bool(); }
void AFGLocomotive::ClearMultipleUnitControlMaster(){ }
bool AFGLocomotive::SetPath( const FRailroadPathFindingResult& result){ return bool(); }
void AFGLocomotive::ClearPath(){ }
bool AFGLocomotive::HasPath() const{ return bool(); }
void AFGLocomotive::GetPath( TArray< FRailroadPathPoint >& out_points){ }
void AFGLocomotive::GetTargetPoints( TArray< FRailroadPathPoint >& out_points){ }
bool AFGLocomotive::UpdatePathSegment(){ return bool(); }
void AFGLocomotive::UpdateTargetPoints( float maxDistance){ }
void AFGLocomotive::SetSelfDrivingEnabled( bool isEnabled){ }
bool AFGLocomotive::IsSelfDrivingEnabled() const{ return bool(); }
void AFGLocomotive::ReportSelfDrivingError( ESelfDrivingLocomotiveError error){ }
ESelfDrivingLocomotiveError AFGLocomotive::GetSelfDrivingError() const{ return ESelfDrivingLocomotiveError(); }
void AFGLocomotive::ClearSelfDrivingError(){ }
void AFGLocomotive::SetPowerConsumption( float pct){ }
void AFGLocomotive::SetPowerRegeneration( float pct){ }
void AFGLocomotive::DisplayDebug(  UCanvas* canvas, const  FDebugDisplayInfo& debugDisplay, float& YL, float& YPos){ }
