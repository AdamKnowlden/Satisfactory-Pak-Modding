// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGOutlineComponent.h"

UFGOutlineComponent::UFGOutlineComponent(){ }
UFGOutlineComponent* UFGOutlineComponent::Get(UWorld* world){ return nullptr; }
void UFGOutlineComponent::ShowOutline( AActor* actorToOutline, EOutlineColor color){ }
void UFGOutlineComponent::ShowProxyOutline(  UStaticMesh* outlineMesh, const FTransform transform, EOutlineColor color){ }
void UFGOutlineComponent::ShowMultiActorOutline( TArray<AActor*> actorsToOutline, EOutlineColor color){ }
void UFGOutlineComponent::UpdateProxyOutlineMesh(  UStaticMesh* newOutlineMesh){ }
void UFGOutlineComponent::UpdateProxyOutlineLocationAndRotation( FVector newLocation, FRotator newRotation){ }
void UFGOutlineComponent::HideOutline(){ }
void UFGOutlineComponent::ShowDismantlePendingMaterial( TArray<class AActor*> actorPendingDismantle){ }
void UFGOutlineComponent::ShowDismantlePendingMaterial(  AActor* actorPendingDismantle){ }
void UFGOutlineComponent::ShowDismantlePendingMaterial(  UFGSplineComponent* splineComponent){ }
void UFGOutlineComponent::ShowDismantlePendingMaterial(  UProxyInstancedStaticMeshComponent* proxyMesh){ }
void UFGOutlineComponent::HideDismantlePendingMaterial(){ }
void UFGOutlineComponent::ShowActorOutline(  AActor* actorToOutline, EOutlineColor color){ }
void UFGOutlineComponent::HideActorOutline(  AActor* actorToDisableOutlineOn){ }
void UFGOutlineComponent::ShowDismantlePendingMaterialOnActor(  AActor* actorPendingForDismantle){ }
void UFGOutlineComponent::HideDismantlePendingMaterialOnActor(  AActor* actorPendingForDismantle){ }
void UFGOutlineComponent::ShowDismantlePendingMaterialOnProxyMesh(  UProxyInstancedStaticMeshComponent* proxyMesh){ }
void UFGOutlineComponent::HideDismantlePendingMaterialOnProxyMesh(  UProxyInstancedStaticMeshComponent* proxyMesh){ }
void UFGOutlineComponent::HideDismantlePendingMaterialOnSplineComponent(  UFGSplineComponent* splineComponent){ }
bool UFGOutlineComponent::IsOwnedByLocalPlayer(){ return bool(); }
