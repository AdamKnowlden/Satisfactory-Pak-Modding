// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGPlayerState.h"

AFGPlayerState::AFGPlayerState(){ }
void AFGPlayerState::Serialize( FArchive& ar){ Super::Serialize(ar ); }
void AFGPlayerState::GetLifetimeReplicatedProps( TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
bool AFGPlayerState::ReplicateSubobjects(  UActorChannel* channel,  FOutBunch* bunch, FReplicationFlags* repFlags){ return bool(); }
void AFGPlayerState::BeginPlay(){ }
void AFGPlayerState::CopyProperties( APlayerState* playerState){ }
void AFGPlayerState::PreSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGPlayerState::PostSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGPlayerState::PreLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGPlayerState::PostLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGPlayerState::GatherDependencies_Implementation( TArray< UObject* >& out_dependentObjects){ }
bool AFGPlayerState::NeedTransform_Implementation(){ return bool(); }
bool AFGPlayerState::ShouldSave_Implementation() const{ return bool(); }
FString AFGPlayerState::GetUserName(){ return FString(); }
FString AFGPlayerState::GetUserID(){ return FString(); }
FUniqueNetIdRepl AFGPlayerState::GetUniqeNetId(){ return FUniqueNetIdRepl(); }
FString AFGPlayerState::GetSteamID(){ return FString(); }
void AFGPlayerState::CreateTutorialSubsystem(){ }
TArray< TSubclassOf< class UFGMessageBase > > AFGPlayerState::GetAllMessages( EMessageType messageType ){ return TArray<TSubclassOf<class UFGMessageBase> >(); }
void AFGPlayerState::ReadMessage( TSubclassOf<  UFGMessageBase > inMessage){ }
void AFGPlayerState::AddMessage( TSubclassOf<  UFGMessageBase > inMessage){ }
void AFGPlayerState::RemoveMessage( TSubclassOf<  UFGMessageBase > inMessage){ }
void AFGPlayerState::SetupDefaultShortcuts(){ }
UFGHotbarShortcut* AFGPlayerState::CreateShortcut( TSubclassOf<  UFGHotbarShortcut > shortcutClass){ return nullptr; }
bool AFGPlayerState::GetAndSetFirstTimeEquipped(  AFGEquipment* equipment){ return bool(); }
AFGPlayerController* AFGPlayerState::GetOwningController() const{ return nullptr; }
void AFGPlayerState::AddNewRecipe( TSubclassOf< UFGRecipe > recipe){ }
void AFGPlayerState::RemoveRecipe( TSubclassOf< UFGRecipe > recipe){ }
void AFGPlayerState::Server_RemoveRecipe_Implementation( TSubclassOf< UFGRecipe > recipe){ }
bool AFGPlayerState::Server_RemoveRecipe_Validate( TSubclassOf< UFGRecipe > recipe){ return bool(); }
void AFGPlayerState::AddArmSlots( int32 slotsToAdd){ }
void AFGPlayerState::OnRep_HotbarShortcuts(){ }
