// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGResearchManager.h"

AFGResearchManager::AFGResearchManager(){ }
void AFGResearchManager::GetLifetimeReplicatedProps( TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGResearchManager::PreInitializeComponents(){ }
AFGResearchManager* AFGResearchManager::Get(  UWorld* world){ return nullptr; }
AFGResearchManager* AFGResearchManager::Get(  UObject* worldContext){ return nullptr; }
void AFGResearchManager::PreSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGResearchManager::PostSaveGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGResearchManager::PreLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGResearchManager::PostLoadGame_Implementation( int32 saveVersion, int32 gameVersion){ }
void AFGResearchManager::GatherDependencies_Implementation( TArray< UObject* >& out_dependentObjects){ }
bool AFGResearchManager::NeedTransform_Implementation(){ return bool(); }
bool AFGResearchManager::ShouldSave_Implementation() const{ return bool(); }
void AFGResearchManager::UnlockResearchWithItem( TSubclassOf<class UFGItemDescriptor> itemClass){ }
int32 AFGResearchManager::PayOffOnResearch( FItemAmount payOff, TSubclassOf<class UFGResearchRecipe> researchRecipe){ return int32(); }
int32 AFGResearchManager::PayOffFromInventory( TSubclassOf<class UFGResearchRecipe> researchRecipe, UFGInventoryComponent* inventory, int32 inventorySlotIndex){ return int32(); }
void AFGResearchManager::GetPayOffBalanceForResearch( TSubclassOf<class UFGResearchRecipe> researchRecipe, TArray<FItemAmount>& out_cost){ }
void AFGResearchManager::GetAllResearchRecipes( TArray<TSubclassOf<class UFGResearchRecipe>>& out_ResearchRecipes) const{ }
void AFGResearchManager::GetAllAccessibleResearch( TArray<TSubclassOf<class UFGResearchRecipe>>& out_ResearchRecipes) const{ }
void AFGResearchManager::GetAllCompletedAndClaimedResearch( TArray<TSubclassOf<class UFGResearchRecipe>>& out_ResearchRecipes) const{ }
void AFGResearchManager::GiveAccessToResearch( TSubclassOf<class UFGResearchRecipe> researchRecipeClass, bool accessedViaCheats ){ }
bool AFGResearchManager::CanResearchBeInitiated( TSubclassOf<class UFGResearchRecipe> researchRecipe) const{ return bool(); }
bool AFGResearchManager::IsResearchRecipeAccessible( TSubclassOf<class UFGResearchRecipe> researchRecipe) const{ return bool(); }
bool AFGResearchManager::IsResearchAccessibleAndPaidOff( TSubclassOf<class UFGResearchRecipe> researchRecipe) const{ return bool(); }
bool AFGResearchManager::IsResearchBeingConducted( TSubclassOf<class UFGResearchRecipe> researchRecipe) const{ return bool(); }
bool AFGResearchManager::IsResearchComplete( TSubclassOf<class UFGResearchRecipe> researchRecipe) const{ return bool(); }
bool AFGResearchManager::ContainsAnyCompletedButUnclaimedResearch() const{ return bool(); }
float AFGResearchManager::GetOngoingResearchTimeLeft( TSubclassOf<class UFGResearchRecipe> researchRecipe) const{ return float(); }
TSubclassOf< class UFGResearchRecipe > AFGResearchManager::GetResearchBeingConducted() const{ return TSubclassOf<class UFGResearchRecipe>(); }
bool AFGResearchManager::IsCompletedResearchResultSelectable( TSubclassOf<class UFGResearchRecipe> researchRecipe) const{ return bool(); }
bool AFGResearchManager::ClaimResearchResults(  AFGCharacterPlayer* instigatorPlayer, TSubclassOf<class UFGResearchRecipe> completedResearch, int32 selectedRewardIndex){ return bool(); }
const FCompletedResearch AFGResearchManager::GetCompletedResearchRewardByRecipe( TSubclassOf<class UFGResearchRecipe> completedResearch){ return FCompletedResearch(); }
void AFGResearchManager::SetSelectedRewardIndexByRecipe( TSubclassOf<class UFGResearchRecipe> completedResearch, int32 selectedIndex){ }
const TArray<FResearchRecipeReward> AFGResearchManager::GetRewardsFromCompletedResearch( FCompletedResearch completedResearch){ return TArray<FResearchRecipeReward>(); }
bool AFGResearchManager::CanResearchRewardBeClaimed( TSubclassOf<class UFGResearchRecipe> researchRecipe) const{ return bool(); }
bool AFGResearchManager::InitiateResearch( TSubclassOf<class UFGResearchRecipe> researchRecipe){ return bool(); }
int32 AFGResearchManager::ConsumeDecorPoints( int32 amount){ return int32(); }
int32 AFGResearchManager::ConsumeStructurePoints( int32 amount){ return int32(); }
void AFGResearchManager::PopulateResearchLists(){ }
void AFGResearchManager::GiveAccessToDefaultResearch(){ }
void AFGResearchManager::StartResearch( TSubclassOf<class UFGResearchRecipe> researchRecipe, float researchTime){ }
void AFGResearchManager::GeneratePendingReward( FCompletedResearch& completedResearch){ }
void AFGResearchManager::OnResearchTimerComplete( TSubclassOf<class UFGResearchRecipe> researchRecipe){ }
