// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGSaveSystem.h"

FSaveHeader::FSaveHeader(){ }
void UFGSaveSystem::Init(){ }
FString UFGSaveSystem::GetSaveDirectoryPath(){ return FString(); }
void UFGSaveSystem::GetSourceSaveDirectoriesPaths( TArray<FString>& out_sourceSaves){ }
UFGSaveSystem* UFGSaveSystem::Get(  UWorld* world){ return nullptr; }
UFGSaveSystem* UFGSaveSystem::Get(  UObject* worldContext){ return nullptr; }
void UFGSaveSystem::FindSaveGames( TArray<FSaveHeader>& out_saveGames, bool newestFirst){ }
void UFGSaveSystem::GetAllSavesPerSession( TArray< FSessionSaveStruct >& out_sessions){ }
bool UFGSaveSystem::IsSessionNameUsed( FString sessionName) const{ return bool(); }
void UFGSaveSystem::AddSessionNameToUsed( FString sessionName){ }
bool UFGSaveSystem::IsValidSaveName( FString saveName){ return bool(); }
bool UFGSaveSystem::SaveGameExists( FString saveName){ return bool(); }
ESaveExists UFGSaveSystem::GetSaveExists( const FString& saveName, const FString& currentSessionName){ return ESaveExists(); }
bool UFGSaveSystem::DeleteSave( FString saveName){ return bool(); }
bool UFGSaveSystem::GetAbsolutePathForSaveGame( const FString& saveName, FString& out_absoluteSaveGame){ return bool(); }
FString UFGSaveSystem::CreateAbsolutePath( const FString& saveName){ return FString(); }
FString UFGSaveSystem::SanitizeMapName( const FString& mapName){ return FString(); }
SessionNameType UFGSaveSystem::GenerateNewSessionName(){ return SessionNameType(); }
bool UFGSaveSystem::FindNewMapName( const FString& oldMapName, FString& out_newMapName){ return bool(); }
bool UFGSaveSystem::FindNewClassName( const FString& oldClassName, FString& out_newClassName){ return bool(); }
bool UFGSaveSystem::FindNewObjectName( const FString& oldObjectName, FString& out_newObjectName){ return bool(); }
void UFGSaveSystem::MigrateSavesToNewLocation(){ }
void UFGSaveSystem::FindSaveGames_Internal( const FString& saveDirectory, TArray<FSaveHeader>& out_saveGames){ }
FString UFGSaveSystem::SaveNameToFileName( const FString& directory, const FString& saveName){ return FString(); }
UWorld* UFGSaveSystem::GetWorld() const{ return nullptr; }
void UFGSaveSystem::GatherUsedSaveIds(){ }
