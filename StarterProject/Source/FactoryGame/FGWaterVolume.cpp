// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGWaterVolume.h"

#if WITH_EDITOR
void AFGWaterVolume::PostLoad(){ Super::PostLoad(); }
void AFGWaterVolume::PreSave( const  ITargetPlatform* targetPlatform){ }
void AFGWaterVolume::PostEditChangeProperty( FPropertyChangedEvent& propertyChangedEvent){ }
void AFGWaterVolume::CheckForErrors(){ }
#endif 
AFGWaterVolume::AFGWaterVolume(){ }
void AFGWaterVolume::BeginPlay(){ }
void AFGWaterVolume::EndPlay( const EEndPlayReason::Type endPlayReason){ }
bool AFGWaterVolume::IsOverlapInVolume( const  USceneComponent& testComponent) const{ return bool(); }
void AFGWaterVolume::GainedSignificance_Implementation(){ }
	void AFGWaterVolume::LostSignificance_Implementation(){ }
float AFGWaterVolume::GetSignificanceRange(){ return float(); }
void AFGWaterVolume::SetCameraIsInside( bool cameraInside, FVector cameraLocation,  AFGPlayerController* PC){ }
const UFGWaterAudio* AFGWaterVolume::GetAudioSettings() const{ return nullptr; }
bool AFGWaterVolume::EncompassesPoint( FVector point, float sphereRadius , float* out_distanceToPoint ){ return bool(); }
FPostProcessVolumeProperties AFGWaterVolume::GetProperties() const{ return FPostProcessVolumeProperties(); }
void AFGWaterVolume::PostUnregisterAllComponents( void){ }
void AFGWaterVolume::PostRegisterAllComponents(){ }
void AFGWaterVolume::GetNavigationData( FNavigationRelevantData& Data) const{ }
FBox AFGWaterVolume::GetNavigationBounds() const{ return FBox(); }
void AFGWaterVolume::RebuildNavigationData(){ }
void AFGWaterVolume::OnPrimitiveComponentEntered( UPrimitiveComponent* overlappedComp, AActor* other, UPrimitiveComponent* otherComp, int32 otherBodyIndex, bool fromSweep, const FHitResult& sweepResult){ }
void AFGWaterVolume::OnPrimitiveComponentExited( UPrimitiveComponent* overlappedComp, AActor* other, UPrimitiveComponent* otherComp, int32 otherBodyIndex){ }
void AFGWaterVolume::OnPawnEntered( APawn* pawn, const FHitResult& enterInfo){ }
void AFGWaterVolume::OnPawnExited( APawn* pawn){ }
