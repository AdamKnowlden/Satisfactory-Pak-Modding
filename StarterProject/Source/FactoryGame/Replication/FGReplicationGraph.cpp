// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGReplicationGraph.h"

void UFGReplicationGraph::ResetGameWorldState(){ }
void UFGReplicationGraph::InitConnectionGraphNodes( UNetReplicationGraphConnection* connectionManager){ }
void UFGReplicationGraph::InitGlobalActorClassSettings(){ }
void UFGReplicationGraph::InitGlobalGraphNodes(){ }
void UFGReplicationGraph::RouteAddNetworkActorToNodes( const FNewReplicatedActorInfo& ActorInfo, FGlobalActorReplicationInfo& GlobalInfo){ }
void UFGReplicationGraph::RouteRemoveNetworkActorToNodes( const FNewReplicatedActorInfo& ActorInfo){ }
int32 UFGReplicationGraph::ServerReplicateActors( float DeltaSeconds){ return int32(); }
void UFGReplicationGraph::NotifyActorDormancyChange( AActor* Actor, ENetDormancy OldDormancyState){ }
void UFGReplicationGraph::InitClassReplicationInfo( FClassReplicationInfo& classInfo, UClass* inClass, bool isSpatialized, int32 NetServerMaxTickRate){ }
void UFGReplicationGraph::AddPersistentDependencyActor(  AFGCharacterPlayer* pawn,  IFGReplicationDependencyActorInterface* depedencyActor){ }
void UFGReplicationGraph::AddReplicationDependencyActor(  AActor* owner,  AFGReplicationDetailActor* replicationDetailActor){ }
void UFGReplicationGraph::RemoveReplicationDependencyActor(  AActor* owner,  AFGReplicationDetailActor* replicationDetailActor){ }
void UFGReplicationGraph::OnReplicationDetailActorStateChange(  IFGReplicationDetailActorOwnerInterface* owner, bool newState){ }
void UFGReplicationGraph::OnCharacterPlayerEquip(  AFGCharacterPlayer* pawn,  AFGEquipment* equipment){ }
void UFGReplicationGraph::OnCharacterPlayerUnequip(  AFGCharacterPlayer* pawn,  AFGEquipment* equipment){ }
void UFGReplicationGraph::OnCharacterPlayerFoliagePickupSpawned(  AFGCharacterPlayer* pawn,  AFGFoliagePickup* foliagePickup){ }
void UFGReplicationGraph::OnBuildableRegistedPlayerChanged(  AFGBuildable* buildable,  AFGCharacterPlayer* player, bool isInUse){ }
void UFGReplicationGraph::OnFactoryProductionStatusChanged(  AFGBuildable* buildable, EProductionStatus oldStatus, EProductionStatus newStatus){ }
EClassRepPolicy UFGReplicationGraph::GetMappingPolicy( const UClass* inClass){ return EClassRepPolicy(); }
void UFGReplicationGraph::LogCurrentActorDependencyList( FGlobalActorReplicationInfo& actorInfo, FString& logMarker){ }
UReplicationGraphNode_AlwaysRelevant_ForConnection* UFGReplicationGraph::GetAlwaysRelevantNodeForConnection( UNetConnection* Connection){ return nullptr; }
void UFGReplicationGraphNode_AlwaysRelevant_ForConnection::GatherActorListsForConnection( const FConnectionGatherActorListParameters& Params){ }
void UFGReplicationGraphNode_AlwaysRelevant_ForConnection::OnLevelVisibilityAdd( FName levelName, UWorld* world){ }
void UFGReplicationGraphNode_AlwaysRelevant_ForConnection::OnLevelVisibilityRemove( FName levelName){ }
void UFGReplicationGraphNode_AlwaysRelevant_ForConnection::ResetWorldGameWorldState(){ }
