// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGItemDescriptor.h"

#if WITH_EDITOR
void UFGItemDescriptor::DeleteAllIcons(){ }
void UFGItemDescriptor::GenerateAllIcons(){ }
FVector UFGItemDescriptor::GetCenterOfCollision(){ return FVector(); }
#endif 
#if WITH_EDITOR
void UFGItemDescriptor::BeginGenerateIcons(){ }
void UFGItemDescriptor::EndGenerateIcons(){ }
void UFGItemDescriptor::ClearStage(){ }
void UFGItemDescriptor::SetupStage(){ }
void UFGItemDescriptor::GenerateIcon( bool reopenAssetEditor, TArray<UPackage*>& out_modifiedAddedPackages){ }
void UFGItemDescriptor::GetItemName( FString& out_itemName) const{ }
void UFGItemDescriptor::GetCurrentFolderPath( FString& out_folderPath) const{ }
void UFGItemDescriptor::GenerateIconName( FString& out_package, FString& out_assetName) const{ }
void UFGItemDescriptor::GenerateMaterialInstanceName( FString& out_package, FString& out_assetName) const{ }
USceneComponent* UFGItemDescriptor::CreatePreviewComponent(  USceneComponent* attachParent,  UActorComponent* componentTemplate, const FName& componentName){ return nullptr; }
USceneComponent* UFGItemDescriptor::CalculateComponentBounds(  USceneComponent* attachParent,  UActorComponent* componentTemplate, const FName& componentName){ return nullptr; }
#endif 
#if WITH_EDITORONLY_DATA
#endif 
UFGItemDescriptor::UFGItemDescriptor(){ }
void UFGItemDescriptor::Serialize( FArchive& ar){ Super::Serialize(ar ); }
void UFGItemDescriptor::PostLoad(){ Super::PostLoad(); }
EResourceForm UFGItemDescriptor::GetForm( TSubclassOf< UFGItemDescriptor > inClass){ return EResourceForm(); }
float UFGItemDescriptor::GetEnergyValue( TSubclassOf< UFGItemDescriptor > inClass){ return float(); }
float UFGItemDescriptor::GetRadioactiveDecay( TSubclassOf< UFGItemDescriptor > inClass){ return float(); }
FText UFGItemDescriptor::GetItemName( TSubclassOf< UFGItemDescriptor > inClass){ return FText(); }
FText UFGItemDescriptor::GetItemDescription( TSubclassOf< UFGItemDescriptor > inClass){ return FText(); }
void UFGItemDescriptor::GetPreviewView( TSubclassOf< UFGItemDescriptor > inClass, FItemView& out_previewView){ }
void UFGItemDescriptor::GetIconView( TSubclassOf< UFGItemDescriptor > inClass, FItemView& out_itemView){ }
FSlateBrush UFGItemDescriptor::GetItemIcon( TSubclassOf< UFGItemDescriptor > inClass){ return FSlateBrush(); }
UTexture2D* UFGItemDescriptor::GetSmallIcon( TSubclassOf< UFGItemDescriptor > inClass){ return nullptr; }
UTexture2D* UFGItemDescriptor::GetBigIcon( TSubclassOf< UFGItemDescriptor > inClass){ return nullptr; }
UStaticMesh* UFGItemDescriptor::GetItemMesh( TSubclassOf< UFGItemDescriptor > inClass){ return nullptr; }
int32 UFGItemDescriptor::GetStackSize( TSubclassOf< UFGItemDescriptor > inClass){ return int32(); }
bool UFGItemDescriptor::CanBeDiscarded( TSubclassOf< UFGItemDescriptor > inClass){ return bool(); }
FText UFGItemDescriptor::GetItemNameInternal() const{ return FText(); }
FText UFGItemDescriptor::GetItemDescriptionInternal() const{ return FText(); }
